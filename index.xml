<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>💊Time Capsule</title><link>http://shawnrong.github.io/</link><description>Recent content on 💊Time Capsule</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 12 Mar 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://shawnrong.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>开始使用React Hooks</title><link>http://shawnrong.github.io/posts/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8react-hooks/</link><pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate><guid>http://shawnrong.github.io/posts/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8react-hooks/</guid><description>Hooks 是React16.8最新引入的特性。使用Hooks可以在函数式组件中管理state。
Hooks 带来的好处可以让更简洁的让UI与状态分离，使代码更加清晰。
说明 使用Hooks的前提是在函数式组件中。所以不能再使用React类组件的几个生命周期函数(需要通过useEffect来实现)
开始 前端项目万物基于TODO APP 😂 , 接一下使用Hooks来创建一个TODO APP。
useState useState 接受一个初始化参数， 返回一个值和set方法
todo 组件：
const todo = props =&amp;gt; { const [todoName, setTodoName] = useState(&amp;#39;&amp;#39;) const [todoList, setTodoList] = useState([]) const inputChangeHandler = event =&amp;gt; { setTodoName(event.target.value) } const todoAddHandler = () =&amp;gt; { setTodoList(todoList.concat(todoName)) } return ( &amp;lt;React.Fragment&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; placeholder=&amp;#34;Todo&amp;#34; value={todoName} onChange={inputChangeHandler} /&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; onClick={todoAddHandler}&amp;gt;Add&amp;lt;/button&amp;gt; &amp;lt;ul&amp;gt; {todoList.map((item, index) =&amp;gt; ( &amp;lt;li key={index}&amp;gt;item&amp;lt;/li&amp;gt; ))} &amp;lt;/ul&amp;gt; &amp;lt;/React.</description></item><item><title>开始使用GraphQL</title><link>http://shawnrong.github.io/posts/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8graphql/</link><pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate><guid>http://shawnrong.github.io/posts/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8graphql/</guid><description>GraphQL简介 GraphQL是一种api查询语言，GraphQL并不用绑定具体的数据库或者存储引擎,它是描述请求的一个规范，类似于RESTful, 可以利用已有的代码和技术来进行数据源管理。一个GraphQL查询是一个被发往服务端的字符串，该查询在服务端被解释和执行后返回JSON数据给客户端。
GraphQL基本语法 GraphQL基本语法可以分为 Fields,Arguments, Alias, Fragments,Operation name,Variables 操作可以分为Query和Mutation，query就是对数据进行查询，而mutation则是对数据进行操作，如增删改。 GraphQL是强类型的协议，支持的具体的数据类型有Int, Float, String, Boolean, ID
Query //下面是一个简单的GraphQL查询，获取id为1的用户的ID，名字,邮箱，所有评论 //其中id,name,email,comments都为fields //id:1为arguments //nickname为alias //...queryComments是fragment //findUser是operation name 可以省略 query findUser { user(id: 1) { id name:nickname #可以给字段设置alias email comments { content } # ...queryComments } } fragment queryComments on Comments { content } Mutation //新建一个用户，然后返回id和名字 //❗️表示字段必输 mutation createUser($id: ID!, $name: String!, $email: String) { createUser(id: $id, name: $name, email: $email) { id name } } //variables { &amp;quot;id&amp;quot;: 1, &amp;quot;name&amp;quot;: &amp;quot;Tom&amp;quot;, &amp;quot;email&amp;quot;: &amp;quot;tom@test.</description></item><item><title>Docker常用命令</title><link>http://shawnrong.github.io/posts/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate><guid>http://shawnrong.github.io/posts/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>Docker note docker info显示详细的信息 docker 命令行格式docker &amp;lt;command&amp;gt; &amp;lt;sub-command&amp;gt; (option) command 一般指manage command,比如docker container run --detach\-d参数，使container在后台运行 docker container run 会一直新建一个container,使用docker container start启用一个已存在的 docker container --help docker container logs [containerName]显示container 日志信息 docker container top [containerName]显示container进程 docker container run -d -p 3306:3306 --name db -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql 新建一个mysql, docker container logs db 查看生成的密码 docker container inspect container配置详细 docker container stats查看所有container 状态 docker container exec -it [name] bash 进入container docker container port [name] docker image history [imagename:tag] 查看历史 docker image tag .</description></item><item><title>理解Laravel IOC容器</title><link>http://shawnrong.github.io/posts/%E7%90%86%E8%A7%A3laravel-ioc%E5%AE%B9%E5%99%A8/</link><pubDate>Sat, 25 Nov 2017 00:00:00 +0000</pubDate><guid>http://shawnrong.github.io/posts/%E7%90%86%E8%A7%A3laravel-ioc%E5%AE%B9%E5%99%A8/</guid><description>理解Laravel IOC容器 IOC容器是Laravel框架一个非常重要的概念
依赖注入 理解IOC容器首先要从依赖注入开始。依赖注入和控制反转是差不多因果关系，通过使用依赖注入这种手段实现功能模块对其依赖组件的控制反转。
拿一个使用OAuth登录应用场景举例：
interface Login { public function login(); } //微信账号登录 class WechatLogin implements Login { public function __construct(){} public function login() {} } //新浪微博登录 class WeiboLogin implements Login { public function __construct(){} public function login() {} } //QQ登录 class QQLogin implements Login { public function __construct(){} public function login() {} } //站点登录 class SiteLogin { protected $oauthClient; public function setOauthClient($oauthClient) { $this-&amp;gt;oauthClient = $oauthClient } public function appLogin() { $this-&amp;gt;oauthClient-&amp;gt;login(); } } 一般可以使用两种方法实现注入</description></item><item><title>PHP反射机制</title><link>http://shawnrong.github.io/posts/php%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</link><pubDate>Tue, 21 Nov 2017 00:00:00 +0000</pubDate><guid>http://shawnrong.github.io/posts/php%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</guid><description>PHP反射机制 介绍 reflection is the ability of a computer program to examine, introspect, and modify its own structure and behavior at runtime — wikipedia
反射的关键点就是在运行时分析类或者对象的状态，导出或提取出关于类，方法，属性，参数等信息。
代码例子 Reflection/Profile.php
namespace codetest\Reflection; /** * Class Profile * * @package codetest\Reflection */ class Profile { public function getUserName() { return &amp;#39;Foo&amp;#39;; } } $reflectionClass = new ReflectionClass(&amp;#39;codetest\Reflection\Profile&amp;#39;); //当然也可以 $reflectionClass = new ReflectionClass(codetest\Reflection\Profile::class); var_dump($reflectionClass-&amp;gt;getName()); // output: codetest\Reflection\Profile var_dump($reflectionClass-&amp;gt;getDocComment()); // output: /** // * Class Profile // * // * @package codetest\Reflection // */ 应用场景 PHP的反射API,一般用到ReflectionClass和ReflectionMethod，</description></item><item><title>Composer Autoload 配置说明</title><link>http://shawnrong.github.io/posts/composer-autoload%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</link><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid>http://shawnrong.github.io/posts/composer-autoload%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</guid><description>Composer Autoload 配置说明 谈到现代PHP,肯定离不开Composer。对于库的自动加载信息，Composer 生成了一个 vendor/autoload.php 文件。你可以简单的引入这个文件，你会得到一个免费的自动加载支持。(注意⚠️：php5.3之后才有namespace)
require &amp;#39;vendor/autoload.php&amp;#39;; namespace的应用大大的给开发提供的便利。autoload 是composer.json中的一个配置参数。autoload利用命名空间进行对应规则或标准的路径映射，从而找到最终的类文件。
四种Autoload模式 1. PSR-0 在 psr-0 key 下你定义了一个命名空间到实际路径的映射（相对于包的根目录）。注意，这里同样支持 PEAR-style 方式的约定（与命名空间不同，PEAR 类库在类名上采用了下划线分隔）。
请注意，命名空间的申明应该以 \\ 结束，以确保 autoloader 能够准确响应。
在 install/update 过程中，PSR-0 引用都将被结合为一个单一的键值对数组，存储至 vendor/composer/autoload_namespaces.php 文件中。
{ &amp;#34;autoload&amp;#34;: { &amp;#34;psr-0&amp;#34;: { &amp;#34;Monolog\\&amp;#34;: &amp;#34;src/&amp;#34;, &amp;#34;Vendor\\Namespace\\&amp;#34;: &amp;#34;src/&amp;#34;, &amp;#34;Vendor_Namespace_&amp;#34;: &amp;#34;src/&amp;#34; } } } ⚠️下划线 _ 对 psr-0 是有特殊意义的。psr-0 的加载器会将类名中的 _ 解析成目录分隔符。
即 Foo_Bar_Test 类会去加载 Foo/Bar/Test.php 文件。
2. PSR-4 将实际路径定义为命名空间。
{ &amp;#34;autoload&amp;#34;: { &amp;#34;psr-4&amp;#34;: { &amp;#34;Monolog\\&amp;#34;: &amp;#34;src/&amp;#34;, &amp;#34;Vendor\\Namespace\\&amp;#34;: &amp;#34;&amp;#34; } } } 3.</description></item><item><title>Laravel 生命周期</title><link>http://shawnrong.github.io/posts/laravel%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link><pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate><guid>http://shawnrong.github.io/posts/laravel%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid><description>Laravel 生命周期 生命周期概述 入口 publuc/index.php是一个Laravel应用程序的入口，是整个框架的起点。index.php代码不多，主要的阶段就是：
加载Composer项目依赖 创建一个app实例容器 接收并且处理http请求 生命周期详解 加载项目依赖 Laravel使用Composer进行包的管理，所有组件的加载工作，仅需要一行代码
require __DIR__.&amp;#39;/../vendor/autoload.php&amp;#39;; 创建App实例 接下来便是创建应用实例(Illuminate\Foundation\Application)，也叫服务容器
$app = require_once __DIR__.&amp;#39;/../bootstrap/app.php&amp;#39;; 整个初始化的过程包括：注册项目基础的ServiceProvider,注册SerciveProvider的Alias,注册目录路径等。
bootstrap/app.php中也完成了内核绑定。
Laravel会依据http请求的运行环境不同，将请求发送至相应的内核HTTP内核 或 Console内核。无论哪个内核，它们作用都是处理http请求。
最终，HTTP内核用handlemethod,单纯的接收一个Request以及返回一个Response。
HTTP内核 HTTP内核继承了Illuminate\Foundation\Http\Kernal类，它定义了在执行请求之前运行的 bootstrappers 数组。包含完成环境检测，配置加载，异常处理，Facades注册，ServiceProvider注册，启动服务这6个引导程序。
HTTP内核定义了所有被请求应用程序处理之前必须经过的HTTP中间件列表。 这些中间件可以处理 HTTP session 的读写, 可以判断服务器当前是否处于维护模式, 验证 CSRF token ( 为了保护服务器不受 CSRF 攻击 ) 等等功能.
ServiceProvider 最重要的引导操作之一就是加载应用程序的ServiceProvider。应用程序的所有ServiceProvider都在config/app.php配置文件的providers数组中配置。所有的provider都会调用register方法，由boot方法负责调用所有的被注册provider。
ServiceProvider负责引导所有框架的各种组件，如数据库、队列、验证和路由组件。也就是说，框架提供的每个功能都它们来引导并配置。因此也可以说，ServiceProvider是整个 Laravel 引导过程中最重要的方面。
接收并处理请求 处理请求包含两个阶段：
创建请求实例 处理请求 创建请求实例 请求实例`Illuminate\Http\Request`的`capture() `方法，内部通过Symfony实例创建一个Laravel请求实例 /** * Create a new Illuminate HTTP request from server variables.</description></item><item><title>Archive</title><link>http://shawnrong.github.io/archive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shawnrong.github.io/archive/</guid><description>archive</description></item><item><title>Search</title><link>http://shawnrong.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shawnrong.github.io/search/</guid><description>search</description></item></channel></rss>