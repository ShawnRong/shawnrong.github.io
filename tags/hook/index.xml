<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hook on 💊Time Capsule</title><link>https://shawnrong.github.io/tags/hook/</link><description>Recent content in Hook on 💊Time Capsule</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 12 Mar 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://shawnrong.github.io/tags/hook/index.xml" rel="self" type="application/rss+xml"/><item><title>开始使用React Hooks</title><link>https://shawnrong.github.io/posts/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8react-hooks/</link><pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate><guid>https://shawnrong.github.io/posts/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8react-hooks/</guid><description>Hooks 是React16.8最新引入的特性。使用Hooks可以在函数式组件中管理state。
Hooks 带来的好处可以让更简洁的让UI与状态分离，使代码更加清晰。
说明 使用Hooks的前提是在函数式组件中。所以不能再使用React类组件的几个生命周期函数(需要通过useEffect来实现)
开始 前端项目万物基于TODO APP 😂 , 接一下使用Hooks来创建一个TODO APP。
useState useState 接受一个初始化参数， 返回一个值和set方法
todo 组件：
const todo = props =&amp;gt; { const [todoName, setTodoName] = useState(&amp;#39;&amp;#39;) const [todoList, setTodoList] = useState([]) const inputChangeHandler = event =&amp;gt; { setTodoName(event.target.value) } const todoAddHandler = () =&amp;gt; { setTodoList(todoList.concat(todoName)) } return ( &amp;lt;React.Fragment&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; placeholder=&amp;#34;Todo&amp;#34; value={todoName} onChange={inputChangeHandler} /&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; onClick={todoAddHandler}&amp;gt;Add&amp;lt;/button&amp;gt; &amp;lt;ul&amp;gt; {todoList.map((item, index) =&amp;gt; ( &amp;lt;li key={index}&amp;gt;item&amp;lt;/li&amp;gt; ))} &amp;lt;/ul&amp;gt; &amp;lt;/React.</description></item></channel></rss>