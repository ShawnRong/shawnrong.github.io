<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Golang on Time Capsule💊</title><link>https://shawnrong.github.io/tags/golang/</link><description>Recent content in Golang on Time Capsule💊</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 20 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://shawnrong.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang的Error Wrapping</title><link>https://shawnrong.github.io/posts/golang%E7%9A%84error-wrapping/</link><pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate><guid>https://shawnrong.github.io/posts/golang%E7%9A%84error-wrapping/</guid><description>Go的错误处理一直是开发者不断吐槽的一个槽点。Go没有像一般语言那样提供try catch的处理方式，而是通过函数返回值的方式直接返回。这样就会让代码显的很啰嗦，要不断的对返回的err进行判断处理。</description></item><item><title>Golang优雅的退出主线程</title><link>https://shawnrong.github.io/posts/golang%E4%BC%98%E9%9B%85%E7%9A%84%E9%80%80%E5%87%BA%E4%B8%BB%E7%BA%BF%E7%A8%8B/</link><pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate><guid>https://shawnrong.github.io/posts/golang%E4%BC%98%E9%9B%85%E7%9A%84%E9%80%80%E5%87%BA%E4%B8%BB%E7%BA%BF%E7%A8%8B/</guid><description>当我们想终止一个运行中golang程序, 往往会使用 ctrl+c 或者 kill -9 &amp;lt;pid&amp;gt; 来杀死程序。当我们正在运行一些原子性操作的代码的时候(比如写文件)， 这样操作的话可能会导致问题产生。 因此需要有一个优雅的处理方式，等原子性的操作代码处理完后，再终止程序。
可以使用 golang的 os.Signal 来捕获系统的终止操作
sig := make(chan os.Signal) signal.Notify(sig, syscall.SIGINT, syscall.SIGKILL, syscall.SIGTERM) POSIX中定义的信号
使用2个channel通信的方式 func main() { sig := make(chan os.Signal) stopCh := make(chan struct{}) finishedCh := make(chan struct{}) signal.Notify(sig, syscall.SIGINT, syscall.SIGKILL) go func(stopCh, finishedCh chan struct{}) { for { select { case &amp;lt;-stopCh: fmt.Println(&amp;#34;stopped&amp;#34;) finishedCh &amp;lt;- struct{}{} return default: time.Sleep(time.Second * 10) } } }(stopCh, finishedCh) //程序被挂起 等待singal &amp;lt;-sig stopCh &amp;lt;- struct{}{} //等待子routine 返回 &amp;lt;-finishedCh fmt.</description></item></channel></rss>