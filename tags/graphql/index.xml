<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GraphQL on 💊Time Capsule</title><link>http://shawnrong.github.io/tags/graphql/</link><description>Recent content in GraphQL on 💊Time Capsule</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 08 May 2018 00:00:00 +0000</lastBuildDate><atom:link href="http://shawnrong.github.io/tags/graphql/index.xml" rel="self" type="application/rss+xml"/><item><title>开始使用GraphQL</title><link>http://shawnrong.github.io/posts/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8graphql/</link><pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate><guid>http://shawnrong.github.io/posts/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8graphql/</guid><description>GraphQL简介 GraphQL是一种api查询语言，GraphQL并不用绑定具体的数据库或者存储引擎,它是描述请求的一个规范，类似于RESTful, 可以利用已有的代码和技术来进行数据源管理。一个GraphQL查询是一个被发往服务端的字符串，该查询在服务端被解释和执行后返回JSON数据给客户端。
GraphQL基本语法 GraphQL基本语法可以分为 Fields,Arguments, Alias, Fragments,Operation name,Variables 操作可以分为Query和Mutation，query就是对数据进行查询，而mutation则是对数据进行操作，如增删改。 GraphQL是强类型的协议，支持的具体的数据类型有Int, Float, String, Boolean, ID
Query //下面是一个简单的GraphQL查询，获取id为1的用户的ID，名字,邮箱，所有评论 //其中id,name,email,comments都为fields //id:1为arguments //nickname为alias //...queryComments是fragment //findUser是operation name 可以省略 query findUser { user(id: 1) { id name:nickname #可以给字段设置alias email comments { content } # ...queryComments } } fragment queryComments on Comments { content } Mutation //新建一个用户，然后返回id和名字 //❗️表示字段必输 mutation createUser($id: ID!, $name: String!, $email: String) { createUser(id: $id, name: $name, email: $email) { id name } } //variables { &amp;quot;id&amp;quot;: 1, &amp;quot;name&amp;quot;: &amp;quot;Tom&amp;quot;, &amp;quot;email&amp;quot;: &amp;quot;tom@test.</description></item></channel></rss>